---
import Counter from "../alpine/counter.astro";
import Form from "../alpine/form.astro";
import Field from "../alpine/field.astro";

export const prerender = false;

const date = new Date();
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Alpine</title>
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
  </head>
  <body>
    <header class="flex justify-center gap-10">
      <a href="/">{"<<"} back</a>
      <h1>
        Alpine
        <span x-data x-text="1+1"></span>
      </h1>
      <a href="/alpine/ajax">/ajax</a>
    </header>

    <main class="px-8 mx-auto max-w-[800px]">
      <section>
        <div x-data="{ count: 1 }" class="my-6">
          <h2 :class="{ even: count%2===0, odd:count%3===0 }">
            Counter <span x-text="count"></span>
             x 2 =
            <span x-text="count*2"></span>
            <span x-show="count%2===0">(is even!)</span>
            <!-- x-show is hidden with display:none;  -->
            <template x-if="count%2===1">
              <span>(is odd...)</span>
              <!-- x-if means the element is not inside the dom at all -->
            </template>
          </h2>
          <p x-text="`the count is ${count} yo`"></p>
          <button class="bg-slate-200" x-on:click="count++">+1</button>
          <button class="bg-slate-200" @click="count+=3">+3</button>
          <button class="bg-slate-200" @click="count*=2">x2</button>
          <!-- <button class="" :disabled="count%2===0?'a':'b'"> RESET</button> -->
        </div>
      </section>

      <section>
        <div x-data="{open:false}" class="my-6">
          <button @click="open=!open" class="bg-slate-100 p-1">menu</button>
          <ul
            class="list-disc absolute left-[50px] bg-blue-100 pl-6 px-2"
            @click.outside="open=false"
            x-show="open"
            x-transition.opacity
            x-transition:enter.duration.600ms
            x-transition:leave.duration.400ms
          >
            <li>First</li>
            <li>SEcond</li>
            <li>Third</li>
          </ul>
          <p>bind:disable works fine with a boolean state</p>
          <!-- <button :disabled="open">Submit</button> -->
        </div>
      </section>

      <section>
        <div
          x-data=`{
              search: '',
              items: ['foo','fizz','fudge','fickle','fight','funk','fenk','fonk','firth','first'],
              get filteredItems() {
                  return this.items.filter(i => i.startsWith(this.search) ).sort((a,b)=>a>b?1:-1)
                }
            }`
        >
          <label>
            Search : <span x-text="search"></span>
            <div>
              <input
                x-model="search"
                placeholder="Search..."
                class="border border-black"
              />
            </div>
          </label>
          <p>Filtered :</p>
          <ul class="list-disc grid grid-cols-3">
            <template x-for="(item,i) in filteredItems">
              <li x-text="`${i}. ${item}`"></li>
            </template>
          </ul>
        </div>
      </section>

      <section>
        <div x-data="dropb">
          Helloooo
          <span x-text="name"></span>
        </div>
        <script is:inline>
          document.addEventListener("alpine:init", () => {
            Alpine.data("dropb", () => ({
              name: "Timothy",
            }));
          });
        </script>
      </section>

      <section>
        <script is:inline>
          document.addEventListener("alpine:init", () => {
            Alpine.store("user", {
              userid: "19023057",
              darkMode: false,
            });
          });
        </script>
        <div
          x-data
          :class="$store.user.darkMode ? ' bg-black text-white ' : 'y' "
        >
          <p>
            User #<span x-text="$store.user.userid"></span>
          </p>
          <p>
            Prefers
            <span x-text="$store.user.darkMode ? 'light-mode' : 'dark-mode' "
            ></span>
            <button
              @click="$store.user.darkMode=!$store.user.darkMode"
              class="bg-slate-100 text-black">switch</button
            >
          </p>
        </div>
      </section>

      <section>
        <div
          x-data="{once:false, state:false, toggle(){ this.state = !this.state }}"
        >
          <p>BIND</p>
          <button
            @click="toggle()"
            x-click="state=!state"
            :class="state?' bg-red-200 ' : ' bg-green-200' ">TOGGLE</button
          >
        </div>
      </section>

      <section
        x-data="{ pos: {x:0,y:0}, scroll: 0 }"
        x-init="console.log('setup here')"
      >
        <p>Events</p>
        <p>
          Mouse Click [ <span x-text="pos.x"></span>,<span x-text="pos.y"
          ></span> ]
        </p>
        <div x-data @click.window="pos.x=$event.pageX; pos.y=$event.pageY;">
        </div>
        <div x-data @scroll.window="scroll=Math.floor(window.scrollY)"></div>
        <div x-text="scroll" class="fixed top-0 right-0 bg-blue-100 p-1"></div>
      </section>

      <section x-data="{name:'Bob'}">
        <p>Event / form</p>
        <p>Name = <span x-text="name"></span></p>
        <form x-ref="form" @submit.prevent="name=$event.target.name.value">
          <input name="name" />
          <button>save</button>
        </form>
        <button @click="console.log($refs.form.reset())">clear</button>
      </section>

      <section>
        <p>With astro for components</p>
        <div class="flex gap-10">
          <Counter value={date.getDate()} />
          <Counter value={date.getMonth()} />
        </div>
      </section>

      <Form />

      <section>
        <p>Trying the way J.H. handles input</p>
        <div x-data="{ letters: ['','','','',''] }">
          <form @keyup.window="addCharacter($event, $data)">
            typing
            <input
              type="hidden"
              name="guess"
              x-bind:value="letters.slice(0, 5).join('')"
            />
          </form>
          <p x-text="JSON.stringify(letters)"></p>
        </div>
        <script is:inline>
          function addCharacter(evt, data) {
            const letter = evt.key.toUpperCase();
            const index = data.letters.indexOf("");
            // $data.letter gives weird proxy
            // but we can work with it as if it was array
            if (letter.length === 1) {
              if (index !== -1) data.letters[index] = letter;
            }
            if (letter === "BACKSPACE") {
              if (index === 0) return;
              const p = index === -1 ? 4 : index - 1;
              data.letters[p] = "";
            }
            if (letter === "ENTER") {
              data.letters = ["", "", "", "", ""];
            }
          }
        </script>
      </section>

      <section>
        <div x-data=`testform`>
          <form @submit.prevent="check($data)">
            <Field name="username" />
            <Field name="password" />
            <button
              :class="isvalid ? ' bg-blue-100' : 'bg-slate-100' "
              :disabled="!isvalid">submit</button
            >
          </form>
        </div>
        <!-- <p x-text="JSON.stringify(username) + JSON.stringify(password)"></p> -->
        <script is:inline>
          document.addEventListener("alpine:init", () => {
            Alpine.data("testform", () => ({
              username: { value: "", error: "" },
              password: { value: "", error: "" },
              get isvalid() {
                return (
                  this.username.value.length === 0 || this.password.value.length
                );
                // return this.username.error === "" && this.password.error === "";
              },
              check() {
                const { username, password } = this;

                if (username.value === "") {
                  username.error = "please enter a username";
                  return;
                }
                username.error = "";
                if (password.value === "") {
                  password.error = "please enter a password";
                  return;
                }
                password.error = "";
                console.log("SUBMIT ", username.value, ",", password.value);
              },
            }));
          });
        </script>
      </section>

      <section x-data="joker" x-init="getjoke">
        <p>Joker</p>
        <p x-text="joke">...loading</p>
        <script is:inline>
          document.addEventListener("alpine:init", () => {
            Alpine.data("joker", () => ({
              joke: "",
              async getjoke() {
                fetch("/alpine/joke")
                  .then((res) => res.text())
                  .then((x) => (this.joke = x));
              },
            }));
          });
        </script>
      </section>

      <section>
        <p>TEXTAREA</p>
        <div x-data="localnotes" x-init="load($data)" x-effect="update">
          <textarea x-model="notes" class="w-[300px]"></textarea>
          <p class="whitespace-pre">
            Notes : <span x-text="notes"></span>
          </p>
        </div>
        <script is:inline>
          document.addEventListener("alpine:init", () => {
            Alpine.data("localnotes", () => ({
              notes: "",
              update() {
                localStorage.setItem("notes", this.notes);
              },
              load(data) {
                const loc = localStorage.getItem("notes");
                if (loc) data.notes = loc;
              },
            }));
          });
        </script>
      </section>

      <section>
        <h2>scope</h2>
        <div></div>
        <div x-data="{foo:'123'}">
          <div
            x-data="{bar:'456', thing(){ console.log( this.foo + this.bar); }}"
          >
            <div x-data="{ thingy(){ console.log( this.foo + this.bar); }}">
              <p x-text=" foo + bar "></p>
              <button @click="thingy">what?</button>
            </div>
          </div>
        </div>
      </section>
      <style>
        section {
          margin: 2rem 0;
        }

        main {
          margin-bottom: 200px;
        }
      </style>
    </main>
  </body>
</html>
